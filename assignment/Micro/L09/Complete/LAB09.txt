LAB09

จากโค้ดโปรแกรม EX01 จงตอบคำถามต่อไปนี้                                                                                                                                          1. ถ้ารับตัวอักษร “a” เข้ามา หลอด LED จะ **ติด**  
2. ถ้ารับตัวอักษร “b” เข้ามา หลอด LED จะ **ดับ**【6†source】.                          จากโค้ดโปรแกรม EX01PY จงตอบคำถามต่อไปนี้                                                     1. **โค้ดบรรทัดที่ 10**: กำหนดรายการคำสั่งเสียงที่ใช้สำหรับเปิดไฟ (เช่น "เปิด", "เปิดไฟ")  
2. **โค้ดบรรทัดที่ 11**: กำหนดรายการคำสั่งเสียงที่ใช้สำหรับปิดไฟ (เช่น "ปิด", "ปิดไฟ")  
3. **โค้ดบรรทัดที่ 15**: ฟังคำสั่งเสียงจากผู้ใช้และแปลงเสียงพูดเป็นข้อความ  
4. **โค้ดบรรทัดที่ 18**: ตรวจสอบว่าข้อความที่ได้รับตรงกับคำสั่งเปิดไฟหรือไม่  
5. **โค้ดบรรทัดที่ 19**: ส่งคำสั่ง 'a' ไปยัง Arduino เพื่อเปิดไฟ  
6. **โค้ดบรรทัดที่ 20**: ส่งเสียงตอบกลับว่า "เปิดไฟเรียบร้อยแล้วค่ะ"【6†source】.                                                                                                  จากโค้ดโปรแกรม EX02 จงตอบคำถามต่อไปนี้                                                        1. **โค้ดบรรทัดที่ 19 ถึง 22**: ควบคุมการเปิดและปิด LED1 โดยถ้าตัวแปร `key` เท่ากับ 'a' จะเปิด LED1 และถ้า `key` เท่ากับ 'b' จะปิด LED1  
2. **โค้ดบรรทัดที่ 24 ถึง 27**: ควบคุมการเปิดและปิด LED2 โดยถ้าตัวแปร `key` เท่ากับ 'c' จะเปิด LED2 และถ้า `key` เท่ากับ 'd' จะปิด LED2  
3. **โค้ดบรรทัดที่ 29 ถึง 32**: ควบคุมการเปิดและปิด LED3 โดยถ้าตัวแปร `key` เท่ากับ 'e' จะเปิด LED3 และถ้า `key` เท่ากับ 'f' จะปิด LED3  
4. **โค้ดบรรทัดที่ 34 ถึง 37**: ควบคุมการเปิดและปิด LED4 โดยถ้าตัวแปร `key` เท่ากับ 'g' จะเปิด LED4 และถ้า `key` เท่ากับ 'h' จะปิด LED4  
5. **โค้ดบรรทัดที่ 39 ถึง 45**: ควบคุมการเปิด LED ทั้ง 4 ดวงพร้อมกัน ถ้าตัวแปร `key` เท่ากับ 'x' จะเปิด LED1, LED2, LED3, และ LED4 พร้อมกัน  
6. **โค้ดบรรทัดที่ 47 ถึง 53**: ควบคุมการปิด LED ทั้ง 4 ดวงพร้อมกัน ถ้าตัวแปร `key` เท่ากับ 'y' จะปิด LED1, LED2, LED3, และ LED4 พร้อมกัน【6†source】.                                                                                                      จากโค้ดโปรแกรม EX02PY จงตอบคำถามต่อไปนี้                                                           1. **โค้ดบรรทัดที่ 30 ถึง 35**: ตรวจสอบคำสั่งเสียงที่ผู้ใช้พูด หากเป็นคำสั่งเปิดไฟหน้าบ้าน (`ask_on_led1`) จะส่งรหัส 'a' ไปยัง Arduino เพื่อเปิดไฟหน้าบ้าน และแจ้งว่าเปิดไฟหน้าบ้านเรียบร้อยแล้ว  
2. **โค้ดบรรทัดที่ 37 ถึง 42**: ตรวจสอบคำสั่งเสียงที่ผู้ใช้พูด หากเป็นคำสั่งเปิดไฟหลังบ้าน (`ask_on_led2`) จะส่งรหัส 'c' ไปยัง Arduino เพื่อเปิดไฟหลังบ้าน และแจ้งว่าเปิดไฟหลังบ้านเรียบร้อยแล้ว  
3. **โค้ดบรรทัดที่ 44 ถึง 49**: ตรวจสอบคำสั่งเสียงที่ผู้ใช้พูด หากเป็นคำสั่งเปิดไฟห้องนอน (`ask_on_led3`) จะส่งรหัส 'e' ไปยัง Arduino เพื่อเปิดไฟห้องนอน และแจ้งว่าเปิดไฟห้องนอนเรียบร้อยแล้ว  
4. **โค้ดบรรทัดที่ 51 ถึง 56**: ตรวจสอบคำสั่งเสียงที่ผู้ใช้พูด หากเป็นคำสั่งเปิดไฟห้องน้ำ (`ask_on_led4`) จะส่งรหัส 'g' ไปยัง Arduino เพื่อเปิดไฟห้องน้ำ และแจ้งว่าเปิดไฟห้องน้ำเรียบร้อยแล้ว  
5. **โค้ดบรรทัดที่ 58 ถึง 60**: ตรวจสอบคำสั่งเสียงที่ผู้ใช้พูด หากเป็นคำสั่งเปิดไฟทั้งหมด (`ask_on_all_led`) จะส่งรหัส 'x' ไปยัง Arduino เพื่อเปิดไฟทุกดวง และแจ้งว่าเปิดไฟทั้งบ้านเรียบร้อยแล้ว  
6. **โค้ดบรรทัดที่ 62 ถึง 64**: ตรวจสอบคำสั่งเสียงที่ผู้ใช้พูด หากเป็นคำสั่งปิดไฟทั้งหมด (`ask_off_all_led`) จะส่งรหัส 'y' ไปยัง Arduino เพื่อปิดไฟทุกดวง และแจ้งว่าปิดไฟทั้งบ้านเรียบร้อยแล้ว【6†source】.                                  จากโค้ดโปรแกรม EX03 จงตอบคำถามต่อไปนี้                                                           1. **โค้ดบรรทัดที่ 18 ถึง 23**: ตรวจสอบว่า `key` เท่ากับ 'r' หรือไม่ ถ้าใช่ จะเปิดไฟสีแดง (ตั้งค่าไฟแดงที่ 255 และไฟเขียว, น้ำเงินที่ 0)  
2. **โค้ดบรรทัดที่ 25 ถึง 30**: ตรวจสอบว่า `key` เท่ากับ 'g' หรือไม่ ถ้าใช่ จะเปิดไฟสีเขียว (ตั้งค่าไฟเขียวที่ 255 และไฟแดง, น้ำเงินที่ 0)  
3. **โค้ดบรรทัดที่ 32 ถึง 37**: ตรวจสอบว่า `key` เท่ากับ 'b' หรือไม่ ถ้าใช่ จะเปิดไฟสีน้ำเงิน (ตั้งค่าไฟน้ำเงินที่ 255 และไฟแดง, เขียวที่ 0)  
4. **โค้ดบรรทัดที่ 39 และ 44**: ตรวจสอบว่า `key` เท่ากับ 'y' หรือไม่ ถ้าใช่ จะเปิดไฟสีเหลือง (ตั้งค่าไฟแดงและเขียวที่ 255 และไฟน้ำเงินที่ 0)【6†source】.                                                                                              จากโค้ดโปรแกรม EX03PY จงตอบคำถามต่อไปนี้                                                1. **โค้ดบรรทัดที่ 20 ถึง 22**: ตรวจสอบว่าผู้ใช้พูดคำสั่งที่เกี่ยวข้องกับสีแดงหรือไม่ ถ้าใช่ จะส่งรหัส 'r' ไปยัง Arduino เพื่อเปิดไฟสีแดง และแจ้งว่าทำการเปิดไฟสีแดงเรียบร้อยแล้ว  
2. **โค้ดบรรทัดที่ 24 ถึง 26**: ตรวจสอบว่าผู้ใช้พูดคำสั่งที่เกี่ยวข้องกับสีเขียวหรือไม่ ถ้าใช่ จะส่งรหัส 'g' ไปยัง Arduino เพื่อเปิดไฟสีเขียว และแจ้งว่าทำการเปิดไฟสีเขียวเรียบร้อยแล้ว  
3. **โค้ดบรรทัดที่ 28 ถึง 30**: ตรวจสอบว่าผู้ใช้พูดคำสั่งที่เกี่ยวข้องกับสีน้ำเงินหรือไม่ ถ้าใช่ จะส่งรหัส 'b' ไปยัง Arduino เพื่อเปิดไฟสีน้ำเงิน และแจ้งว่าทำการเปิดไฟสีน้ำเงินเรียบร้อยแล้ว  
4. **โค้ดบรรทัดที่ 32 ถึง 34**: ตรวจสอบว่าผู้ใช้พูดคำสั่งที่เกี่ยวข้องกับสีเหลืองหรือไม่ ถ้าใช่ จะส่งรหัส 'y' ไปยัง Arduino เพื่อเปิดไฟสีเหลือง และแจ้งว่าทำการเปิดไฟสีเหลืองเรียบร้อยแล้ว【6†source】.                                      จากโค้ดโปรแกรม EX04 จงตอบคำถามต่อไปนี้                                                                      1. **โค้ดบรรทัดที่ 9**: อ่านค่าจากเซนเซอร์ PIR โดยใช้ฟังก์ชัน `digitalRead(pir_pin)` เพื่อตรวจสอบว่ามีการเคลื่อนไหวหรือไม่ ถ้ามีจะได้ค่าเป็น HIGH (True)  
2. **โค้ดบรรทัดที่ 10 ถึง 14**: ตรวจสอบว่าค่าที่อ่านจากเซนเซอร์ PIR เป็น HIGH หรือไม่ ถ้าใช่จะแสดงข้อความ "Found" ใน Serial Monitor และหน่วงเวลาประมาณ 2 วินาที  
3. **โค้ดบรรทัดที่ 15 ถึง 18**: ตรวจสอบว่าค่าที่อ่านจากเซนเซอร์ PIR เป็น LOW หรือไม่ ถ้าใช่จะแสดงข้อความ "..." ใน Serial Monitor เพื่อบอกว่าไม่มีการเคลื่อนไหวตรวจพบ【6†source】.                                                           จากโค้ดโปรแกรม EX04PY จงตอบคำถามต่อไปนี้                                                 1. **โค้ดบรรทัดที่ 12**: อ่านค่าข้อมูลจาก Arduino ที่ส่งมาผ่าน Serial โดยใช้ฟังก์ชัน `ser.readline()` เพื่อรับข้อมูลแต่ละบรรทัด และแปลงข้อมูลจาก byte เป็น string พร้อมทั้งลบตัวอักษรท้ายบรรทัด (`[:-2]`)  
2. **โค้ดบรรทัดที่ 13**: ตรวจสอบว่าข้อความที่รับจาก Arduino ตรงกับคำว่า "Found" หรือไม่ ซึ่งเป็นสัญญาณบอกว่ามีการตรวจพบการเคลื่อนไหวจากเซนเซอร์ PIR  
3. **โค้ดบรรทัดที่ 14**: หากตรวจพบการเคลื่อนไหว จะใช้ฟังก์ชัน `ST.tts()` ส่งคำพูด "ยินดีต้อนรับค่ะ เชิญเลือกซื้อสินค้าได้ตามสบายค่ะ" ออกลำโพง  
4. **โค้ดบรรทัดที่ 16**: หน่วงเวลาการทำงาน 1.5 วินาที เพื่อให้โปรแกรมมีเวลาพักก่อนที่จะรับข้อมูลครั้งถัดไป และล้างข้อมูลใน Serial Buffer ด้วย `ser.flushInput()`【6†source】.                                                          จากโค้ดโปรแกรม EX05 จงตอบคำถามต่อไปนี้                                                  1. **โค้ดบรรทัดที่ 10 ถึง 14**: ตรวจสอบค่าจากเซนเซอร์ตรวจจับควัน (Smoke Sensor) ถ้าค่าเป็น HIGH (แสดงว่ามีควัน) จะส่งข้อความ "Smoke" ผ่าน Serial Monitor และหน่วงเวลา 2 วินาที  
2. **โค้ดบรรทัดที่ 15 ถึง 18**: ตรวจสอบค่าจากเซนเซอร์ตรวจจับควัน ถ้าค่าเป็น LOW (ไม่มีควัน) จะส่งข้อความ "***" ผ่าน Serial Monitor เพื่อระบุว่าไม่มีควันตรวจพบ【6†source】.                                                                 จากโค้ดโปรแกรม EX5PY จงตอบคำถามต่อไปนี้                                                    1. **โค้ดบรรทัดที่ 13 ถึง 16**: ตรวจสอบว่าข้อความที่ได้รับจาก Arduino ตรงกับคำว่า "Smoke" หรือไม่ หากตรง จะใช้ฟังก์ชัน `ST.tts()` เพื่อแจ้งเตือนด้วยเสียงว่า "ที่นี่เป็นบริเวณห้ามสูบบุหรี่ค่ะ กรุณาให้ความร่วมมือด้วยค่ะ" พร้อมหน่วงเวลาการทำงาน 1.5 วินาที และล้างข้อมูลใน Serial Buffer ด้วย `ser.flushInput()`  
2. **โค้ดบรรทัดที่ 17 และ 18**: ถ้าข้อความที่ได้รับจาก Arduino ไม่ใช่ "Smoke" จะพิมพ์ข้อความ "***" ลงใน Serial Monitor เพื่อแสดงว่าไม่มีการตรวจพบควัน【6†source】.                                                    จากโค้ดโปรแกรม EX06 จงตอบคำถามต่อไปนี้                                           1. **โค้ดบรรทัดที่ 15**: อ่านค่าอุณหภูมิจากเซนเซอร์ DS18B20 โดยใช้ฟังก์ชัน `sensors.getTempCByIndex(0)` เพื่อเก็บค่าอุณหภูมิที่อ่านได้ไว้ในตัวแปร `Tint`  
2. **โค้ดบรรทัดที่ 16 ถึง 20**: ตรวจสอบว่าอุณหภูมิที่อ่านได้อยู่ในช่วง 0 ถึง 50 องศาเซลเซียสหรือไม่ ถ้าใช่ จะส่งค่าของตัวแปร `Tint` (ค่าอุณหภูมิ) ออกไปยัง Serial Monitor และหน่วงเวลาประมาณ 500 มิลลิวินาที【6†source】.                                                                                               จากโค้ดโปรแกรม EX06PY จงตอบคำถามต่อไปนี้                                             1. **โค้ดบรรทัดที่ 19**: เมื่อผู้ใช้พูดคำสั่งที่เกี่ยวข้องกับการถามอุณหภูมิ โปรแกรมจะสร้างข้อความเพื่อตอบกลับ โดยเพิ่มค่าอุณหภูมิที่อ่านได้จากเซนเซอร์ (`temp`) เข้าไปในข้อความ เพื่อเตรียมแจ้งผู้ใช้  
2. **โค้ดบรรทัดที่ 20 และ 21**: ฟังก์ชัน `ST.tts()` จะถูกเรียกเพื่อแปลงข้อความอุณหภูมิที่สร้างในบรรทัดที่ 19 ให้เป็นเสียงพูด และแจ้งผู้ใช้ว่าอุณหภูมิในขณะนั้นเป็นเท่าใด โดยพูดว่า "ขณะนี้อุณหภูมิ [ค่าอุณหภูมิ] องศาเซลเซียส"【6†source】.                                                    จากโค้ดโปรแกรม EX07 จงตอบคำถามต่อไปนี้                                             1. **โค้ดบรรทัดที่ 21 ถึง 28**: เมื่อผู้ใช้ป้อนรหัสผ่านถูกต้อง (เช่น "7438") จะส่งรหัส 'a' ไปยัง Arduino เพื่อเปิดประตู และใช้ฟังก์ชัน `ST.tts()` เพื่อแจ้งว่า "รหัสผ่านถูกต้อง" และ "ยินดีต้อนรับค่ะ" จากนั้นหน่วงเวลาประมาณ 3 วินาที  
2. **โค้ดบรรทัดที่ 30 ถึง 37**: หากรหัสผ่านที่ผู้ใช้ป้อนไม่ถูกต้อง จะใช้ฟังก์ชัน `ST.tts()` แจ้งว่า "รหัสผ่านไม่ถูกต้องค่ะ" และส่งรหัส 'b' ไปยัง Arduino เพื่อปิดการทำงานของมอเตอร์หรือระบบที่เกี่ยวข้อง จากนั้นจะหยุดการทำงานของลูปตรวจสอบรหัสผ่านนี้【6†source】.                                             จากโค้ดโปรแกรม EX07PY จงตอบคำถามต่อไปนี้                                            1. **โค้ดบรรทัดที่ 25 ถึง 29**: เมื่อรหัสผ่านที่ผู้ใช้ป้อนถูกต้อง (เช่น "7438") โปรแกรมจะส่งรหัส 'a' ไปยัง Arduino เพื่อเปิดประตู จากนั้นใช้ฟังก์ชัน `ST.tts()` แจ้งว่า "รหัสผ่านถูกต้อง" และ "ยินดีต้อนรับค่ะ" แล้วหน่วงเวลาประมาณ 3 วินาที ก่อนดำเนินการต่อ  
2. **โค้ดบรรทัดที่ 32**: หากรหัสผ่านไม่ถูกต้อง โปรแกรมจะส่งรหัส 'b' ไปยัง Arduino เพื่อปิดการทำงานของระบบหรือมอเตอร์ และสิ้นสุดลูปการตรวจสอบรหัสผ่าน【6†source】.                                               จากโค้ดโปรแกรม EX08 จงตอบคำถามต่อไปนี้                                                      1. **โค้ดบรรทัดที่ 17 ถึง 22**: ตรวจสอบว่าค่าของ `key` เท่ากับ '0' หรือไม่ หากใช่ จะสั่งปิด LED ทั้ง 3 ดวง (ตั้งค่าทั้ง `led1`, `led2`, และ `led3` ให้เป็น LOW)  
2. **โค้ดบรรทัดที่ 23 ถึง 28**: ตรวจสอบว่าค่าของ `key` เท่ากับ '1' หรือไม่ หากใช่ จะเปิดเฉพาะ LED1 (ตั้งค่า `led1` ให้เป็น HIGH และ `led2` กับ `led3` เป็น LOW)  
3. **โค้ดบรรทัดที่ 29 ถึง 34**: ตรวจสอบว่าค่าของ `key` เท่ากับ '2' หรือไม่ หากใช่ จะเปิด LED1 และ LED2 (ตั้งค่า `led1` และ `led2` ให้เป็น HIGH และ `led3` เป็น LOW)  
4. **โค้ดบรรทัดที่ 35 ถึง 40**: ตรวจสอบว่าค่าของ `key` เท่ากับ '3' หรือไม่ หากใช่ จะเปิด LED ทั้ง 3 ดวง (ตั้งค่าทั้ง `led1`, `led2`, และ `led3` ให้เป็น HIGH)【6†source】.                                                                            จากโค้ดโปรแกรม EX08PY จงตอบคำถามต่อไปนี้                                                       1. **โค้ดบรรทัดที่ 18**: ตรวจจับการเคลื่อนไหวของมือและตรวจสอบว่ามีการตรวจพบ Landmark ของมือหรือไม่ โดยใช้ฟังก์ชัน `mpHand.one_hand()`  
2. **โค้ดบรรทัดที่ 22 ถึง 25**: ระบุพิกัดของจุดที่ 8 (ปลายนิ้วชี้) และวาดวงกลมที่จุดนั้นบนภาพ โดยพิกัดจะถูกคำนวณตามขนาดของภาพที่ได้รับจากกล้อง  
3. **โค้ดบรรทัดที่ 27 ถึง 30**: ระบุพิกัดของจุดที่ 12 (ปลายนิ้วกลาง) และวาดวงกลมที่จุดนั้นบนภาพ โดยพิกัดจะถูกคำนวณตามขนาดของภาพ  
4. **โค้ดบรรทัดที่ 32 ถึง 35**: ระบุพิกัดของจุดที่ 16 (ปลายนิ้วนาง) และวาดวงกลมที่จุดนั้นบนภาพ โดยพิกัดจะถูกคำนวณตามขนาดของภาพ  
5. **โค้ดบรรทัดที่ 37 ถึง 40**: ระบุพิกัดของจุดที่ 5 (ฐานนิ้วชี้) และวาดวงกลมที่จุดนั้นบนภาพ โดยพิกัดจะถูกคำนวณตามขนาดของภาพ  
6. **โค้ดบรรทัดที่ 42 ถึง 44**: ตรวจสอบว่าปลายนิ้วทั้งสาม (จุดที่ 8, 12, และ 16) อยู่ต่ำกว่าฐานนิ้วชี้ (จุดที่ 5) หรือไม่ หากเป็นจริง จะแสดงเลข "0" บนภาพและส่งรหัส '0' ไปยัง Arduino  
7. **โค้ดบรรทัดที่ 46 ถึง 48**: ตรวจสอบว่าปลายนิ้วชี้ (จุดที่ 8) อยู่สูงกว่าฐานนิ้วชี้ แต่ปลายนิ้วกลาง (จุดที่ 12) และปลายนิ้วนาง (จุดที่ 16) อยู่ต่ำกว่า หากเป็นจริง จะแสดงเลข "1" บนภาพและส่งรหัส '1' ไปยัง Arduino  
8. **โค้ดบรรทัดที่ 50 ถึง 52**: ตรวจสอบว่าปลายนิ้วชี้และปลายนิ้วกลางอยู่สูงกว่าฐานนิ้วชี้ แต่ปลายนิ้วนางอยู่ต่ำกว่า หากเป็นจริง จะแสดงเลข "2" บนภาพและส่งรหัส '2' ไปยัง Arduino  
9. **โค้ดบรรทัดที่ 54 ถึง 56**: ตรวจสอบว่าปลายนิ้วทั้งสาม (จุดที่ 8, 12, และ 16) อยู่สูงกว่าฐานนิ้วชี้ หากเป็นจริง จะแสดงเลข "3" บนภาพและส่งรหัส '3' ไปยัง Arduino【6†source】.                                                          จากโค้ดโปรแกรม EX09 จงตอบคำถามต่อไปนี้                                                                   1. **โค้ดบรรทัดที่ 10 ถึง 13**: เปิดการใช้งานกล้อง (VideoCapture) เพื่อรับภาพจากกล้องและแสดงผล โดย `cap.read()` ใช้เพื่ออ่านภาพจากกล้องและพลิกภาพซ้าย-ขวาด้วย `cv2.flip()`  
2. **โค้ดบรรทัดที่ 14 ถึง 17**: ใช้ฟังก์ชัน `mpFace.face()` เพื่อตรวจจับ Landmark บนใบหน้าจากภาพที่ได้รับจากกล้อง และเก็บข้อมูล Landmark เพื่อใช้งานต่อไป  
3. **โค้ดบรรทัดที่ 18 ถึง 21**: ตรวจสอบว่ามีการตรวจพบ Landmark ของใบหน้าหรือไม่ ถ้าพบ จะทำการระบุพิกัดของจุดที่ 13 (กลางริมฝีปากบน) และวาดวงกลมที่จุดนั้นบนภาพ โดยพิกัดจะคำนวณตามขนาดของภาพ【6†source】.                                                                                  จากโค้ดโปรแกรม EX09PY จงตอบคำถามต่อไปนี้                                                    1. **บรรทัดที่ 18**: ตรวจสอบการตรวจจับใบหน้าและรับข้อมูลจุด Landmark จากใบหน้า

2. **บรรทัดที่ 22 ถึง 25**: คำนวณตำแหน่งของจุด 13 (กลางริมฝีปากบน) และวาดวงกลมบนจุดนั้น

3. **บรรทัดที่ 27 ถึง 30**: คำนวณตำแหน่งของจุด 14 (กลางริมฝีปากล่าง) และวาดวงกลมบนจุดนั้น

4. **บรรทัดที่ 32**: คำนวณระยะห่างระหว่างจุด 13 และ 14 เพื่อใช้ตรวจสอบการอ้าปาก

5. **บรรทัดที่ 33 ถึง 35**: หากระยะห่างมากกว่า 5 แสดงว่าอ้าปาก ส่งคำสั่งเปิด LED และแสดงข้อความ "Open"

6. **บรรทัดที่ 36 ถึง 39**: หากไม่ตรงเงื่อนไขแสดงว่าปิดปาก ส่งคำสั่งปิด LED และแสดงข้อความ "Close"